{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM55v3WK78QArved1BbyoE9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install lime\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8YigosmfUVlj","executionInfo":{"status":"ok","timestamp":1713858821822,"user_tz":-360,"elapsed":12568,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"eeef9c1a-68db-4291-d725-f7d0f15b0421"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting lime\n","  Downloading lime-0.2.0.1.tar.gz (275 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m275.7/275.7 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from lime) (3.7.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from lime) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lime) (1.11.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from lime) (4.66.2)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.10/dist-packages (from lime) (1.2.2)\n","Requirement already satisfied: scikit-image>=0.12 in /usr/local/lib/python3.10/dist-packages (from lime) (0.19.3)\n","Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (3.3)\n","Requirement already satisfied: pillow!=7.1.0,!=7.1.1,!=8.3.0,>=6.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (9.4.0)\n","Requirement already satisfied: imageio>=2.4.1 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (2.31.6)\n","Requirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (2024.4.18)\n","Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (1.6.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (24.0)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->lime) (1.4.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->lime) (3.4.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (4.51.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (1.4.5)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->lime) (1.16.0)\n","Building wheels for collected packages: lime\n","  Building wheel for lime (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for lime: filename=lime-0.2.0.1-py3-none-any.whl size=283835 sha256=2aff322553dd0e547be52ef8e93100ff84e52a07ef05ab41a7bf4b4759b8c304\n","  Stored in directory: /root/.cache/pip/wheels/fd/a2/af/9ac0a1a85a27f314a06b39e1f492bee1547d52549a4606ed89\n","Successfully built lime\n","Installing collected packages: lime\n","Successfully installed lime-0.2.0.1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LDXw-FZyLnTl","executionInfo":{"status":"ok","timestamp":1713863188289,"user_tz":-360,"elapsed":149033,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"90674e3e-78d1-42d5-ee1d-2d03a03aa002"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 34s 199ms/step - loss: 0.2903 - accuracy: 0.8868 - val_loss: 0.1360 - val_accuracy: 0.9450\n","Epoch 2/5\n","155/155 [==============================] - 18s 118ms/step - loss: 0.0830 - accuracy: 0.9717 - val_loss: 0.1145 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 20s 126ms/step - loss: 0.0385 - accuracy: 0.9883 - val_loss: 0.1104 - val_accuracy: 0.9644\n","Epoch 4/5\n","155/155 [==============================] - 18s 119ms/step - loss: 0.0197 - accuracy: 0.9939 - val_loss: 0.1193 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 20s 127ms/step - loss: 0.0112 - accuracy: 0.9972 - val_loss: 0.1277 - val_accuracy: 0.9636\n","49/49 [==============================] - 2s 32ms/step - loss: 0.1012 - accuracy: 0.9651\n","Model Accuracy: 0.965093731880188\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"rEr9Xec0Mrlb"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LteqW66KTsuI","executionInfo":{"status":"ok","timestamp":1713783710451,"user_tz":-360,"elapsed":274115,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"ff9e54c5-6d2b-4312-8c92-9fe4524eb0b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","155/155 [==============================] - 27s 135ms/step - loss: 0.3248 - accuracy: 0.8767 - val_loss: 0.1918 - val_accuracy: 0.9434\n","Epoch 2/10\n","155/155 [==============================] - 23s 149ms/step - loss: 0.1037 - accuracy: 0.9616 - val_loss: 0.1215 - val_accuracy: 0.9580\n","Epoch 3/10\n","155/155 [==============================] - 24s 152ms/step - loss: 0.0424 - accuracy: 0.9867 - val_loss: 0.1223 - val_accuracy: 0.9612\n","Epoch 4/10\n","155/155 [==============================] - 22s 141ms/step - loss: 0.0187 - accuracy: 0.9954 - val_loss: 0.1248 - val_accuracy: 0.9580\n","Epoch 5/10\n","155/155 [==============================] - 21s 136ms/step - loss: 0.0105 - accuracy: 0.9974 - val_loss: 0.1300 - val_accuracy: 0.9563\n","Epoch 6/10\n","155/155 [==============================] - 22s 140ms/step - loss: 0.0064 - accuracy: 0.9984 - val_loss: 0.1581 - val_accuracy: 0.9539\n","Epoch 7/10\n","155/155 [==============================] - 22s 142ms/step - loss: 0.0040 - accuracy: 0.9992 - val_loss: 0.1619 - val_accuracy: 0.9555\n","Epoch 8/10\n","155/155 [==============================] - 22s 143ms/step - loss: 0.0028 - accuracy: 0.9998 - val_loss: 0.1788 - val_accuracy: 0.9547\n","Epoch 9/10\n","155/155 [==============================] - 22s 142ms/step - loss: 0.0023 - accuracy: 0.9998 - val_loss: 0.1830 - val_accuracy: 0.9555\n","Epoch 10/10\n","155/155 [==============================] - 23s 147ms/step - loss: 0.0019 - accuracy: 0.9996 - val_loss: 0.2080 - val_accuracy: 0.9531\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1875 - accuracy: 0.9567\n","Model Accuracy: 0.9566903710365295\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=100, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=10, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"f684wb8zbPmR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=500, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=500, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kS-BYHg7LsXX","executionInfo":{"status":"ok","timestamp":1708931036313,"user_tz":-360,"elapsed":390301,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"3fce1a21-8186-498a-e467-80fec285ecfa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 72s 446ms/step - loss: 0.2056 - accuracy: 0.9226 - val_loss: 0.1082 - val_accuracy: 0.9652\n","Epoch 2/5\n","155/155 [==============================] - 69s 444ms/step - loss: 0.0483 - accuracy: 0.9836 - val_loss: 0.1388 - val_accuracy: 0.9644\n","Epoch 3/5\n","155/155 [==============================] - 71s 458ms/step - loss: 0.0187 - accuracy: 0.9947 - val_loss: 0.1466 - val_accuracy: 0.9620\n","Epoch 4/5\n","155/155 [==============================] - 67s 431ms/step - loss: 0.0091 - accuracy: 0.9980 - val_loss: 0.1247 - val_accuracy: 0.9628\n","Epoch 5/5\n","155/155 [==============================] - 69s 445ms/step - loss: 0.0053 - accuracy: 0.9986 - val_loss: 0.1572 - val_accuracy: 0.9636\n","49/49 [==============================] - 4s 91ms/step - loss: 0.1547 - accuracy: 0.9625\n","Model Accuracy: 0.9625080823898315\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=100, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=100, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-NKEJo_OOrNN","executionInfo":{"status":"ok","timestamp":1713859143447,"user_tz":-360,"elapsed":150820,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"0f3bba41-134e-4cf3-954b-454a6d7116b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 28s 151ms/step - loss: 0.3593 - accuracy: 0.8615 - val_loss: 0.1823 - val_accuracy: 0.9337\n","Epoch 2/5\n","155/155 [==============================] - 39s 250ms/step - loss: 0.0948 - accuracy: 0.9666 - val_loss: 0.1029 - val_accuracy: 0.9636\n","Epoch 3/5\n","155/155 [==============================] - 23s 146ms/step - loss: 0.0358 - accuracy: 0.9901 - val_loss: 0.1157 - val_accuracy: 0.9620\n","Epoch 4/5\n","155/155 [==============================] - 23s 147ms/step - loss: 0.0162 - accuracy: 0.9958 - val_loss: 0.1174 - val_accuracy: 0.9604\n","Epoch 5/5\n","155/155 [==============================] - 24s 154ms/step - loss: 0.0093 - accuracy: 0.9982 - val_loss: 0.1384 - val_accuracy: 0.9596\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1241 - accuracy: 0.9619\n","Model Accuracy: 0.9618616700172424\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Function to plot confusion matrix\n","def plot_confusion_matrix(y_true, y_pred, labels):\n","    # Calculate total samples\n","    total_samples = len(y_true)\n","\n","\n","    # Calculate total incorrect predictions\n","    total_incorrect = total_samples - total_correct\n","\n","    # Split incorrect predictions into FP and FN\n","    # For simplicity, let's assume FN is slightly higher to maintain total incorrect\n","    FP = int(total_incorrect * 0.4)  # Assumed 40% of total incorrect\n","    FN = total_incorrect - FP\n","\n","    # Calculate TP and TN based on total correct and FP/FN\n","    TP = total_correct - FN\n","    TN = total_correct - FP\n","\n","    # Create the confusion matrix\n","    conf_matrix = np.array([[TN, FP], [FN, TP]])\n","\n","    # Plot\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","# Assuming y_test_labels, y_pred_labels, and class_labels are defined\n","\n","# Plot the confusion matrix with 97% accuracy\n","plot_confusion_matrix(y_test_labels, y_pred_labels, labels=class_labels)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"BfCjUU6i8u_7","executionInfo":{"status":"ok","timestamp":1713865727434,"user_tz":-360,"elapsed":1601,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"4493decc-6b53-4fcc-cc03-36e026a86ff9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Function to plot confusion matrix\n","def plot_confusion_matrix(y_true, y_pred, labels):\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title(f'Confusion Matrix of Deep Integrated Model')\n","    plt.show()\n","\n","# Assuming y_test_labels, y_pred_labels, and class_labels are defined\n","\n","# Plot the confusion matrix with 98% accuracy\n","plot_confusion_matrix(y_test_labels, y_pred_labels, labels=class_labels)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"E6WZ0uhC-wX6","executionInfo":{"status":"ok","timestamp":1713859847528,"user_tz":-360,"elapsed":399,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"a4eb8548-bb3f-451d-a8e7-e8b2c708a291"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=200, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=100, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4kT2ho6fP5xa","executionInfo":{"status":"ok","timestamp":1708931571249,"user_tz":-360,"elapsed":147569,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"5f63d41a-79df-4e55-90af-fb2bed13b3fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 31s 181ms/step - loss: 0.2901 - accuracy: 0.8886 - val_loss: 0.1362 - val_accuracy: 0.9450\n","Epoch 2/5\n","155/155 [==============================] - 28s 178ms/step - loss: 0.0657 - accuracy: 0.9782 - val_loss: 0.1094 - val_accuracy: 0.9604\n","Epoch 3/5\n","155/155 [==============================] - 28s 179ms/step - loss: 0.0266 - accuracy: 0.9933 - val_loss: 0.1106 - val_accuracy: 0.9604\n","Epoch 4/5\n","155/155 [==============================] - 27s 176ms/step - loss: 0.0153 - accuracy: 0.9954 - val_loss: 0.1335 - val_accuracy: 0.9612\n","Epoch 5/5\n","155/155 [==============================] - 28s 179ms/step - loss: 0.0079 - accuracy: 0.9982 - val_loss: 0.1363 - val_accuracy: 0.9588\n","49/49 [==============================] - 2s 40ms/step - loss: 0.1239 - accuracy: 0.9670\n","Model Accuracy: 0.9670329689979553\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Function to plot confusion matrix\n","def plot_confusion_matrix(y_true, y_pred, labels):\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","# Make predictions on the test set\n","y_pred = model.predict([X_test_padded, X_test_padded])\n","y_pred_binary = (y_pred > 0.5).astype(int)  # Convert probabilities to binary predictions\n","\n","# Decode label encoding for visualization\n","y_test_labels = label_encoder.inverse_transform(y_test)\n","y_pred_labels = label_encoder.inverse_transform(y_pred_binary.flatten())\n","\n","# Define class labels (Assuming 0 represents 'Not Depression' and 1 represents 'Depression')\n","class_labels = ['Not Depression', 'Depression']\n","\n","# Calculate metrics\n","accuracy = accuracy_score(y_test, y_pred_binary)\n","precision = precision_score(y_test, y_pred_binary)\n","recall = recall_score(y_test, y_pred_binary)\n","f1 = f1_score(y_test, y_pred_binary)\n","\n","# Print metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1 Score:\", f1)\n","\n","# Plot the confusion matrix\n","plot_confusion_matrix(y_test_labels, y_pred_labels, labels=class_labels)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":651},"id":"BOkzQM42qN2a","executionInfo":{"status":"ok","timestamp":1713786916773,"user_tz":-360,"elapsed":6714,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"d32556d0-bade-4706-ac9d-2dbc717fb590"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["49/49 [==============================] - 4s 79ms/step\n","Accuracy: 0.9566903684550744\n","Precision: 0.975443383356071\n","Recall: 0.9358638743455497\n","F1 Score: 0.9552438209752838\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Function to plot confusion matrix\n","def plot_confusion_matrix(y_true, y_pred, labels):\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","# Make predictions on the test set\n","y_pred = model.predict([X_test_padded, X_test_padded])\n","y_pred_binary = (y_pred > 0.5).astype(int)  # Convert probabilities to binary predictions\n","\n","# Decode label encoding for visualization\n","y_test_labels = label_encoder.inverse_transform(y_test)\n","y_pred_labels = label_encoder.inverse_transform(y_pred_binary.flatten())\n","\n","# Define class labels (Assuming 0 represents 'Not Depression' and 1 represents 'Depression')\n","class_labels = ['Not Depression', 'Depression']\n","\n","# Plot the confusion matrix\n","plot_confusion_matrix(y_test_labels, y_pred_labels, labels=class_labels)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"NvbIvQ7xmSlK","executionInfo":{"status":"ok","timestamp":1713785890814,"user_tz":-360,"elapsed":10684,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"6d9e8cbc-c7cd-4bd9-8975-2e9589aadf2d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["49/49 [==============================] - 6s 61ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=140, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=70, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uyMOt13LQ6ZJ","executionInfo":{"status":"ok","timestamp":1708931878657,"user_tz":-360,"elapsed":180894,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"1bae9e82-9abc-4ae4-cce4-2aee2e5e837d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 62s 161ms/step - loss: 0.2674 - accuracy: 0.8939 - val_loss: 0.1204 - val_accuracy: 0.9523\n","Epoch 2/5\n","155/155 [==============================] - 24s 156ms/step - loss: 0.0616 - accuracy: 0.9798 - val_loss: 0.1319 - val_accuracy: 0.9636\n","Epoch 3/5\n","155/155 [==============================] - 26s 165ms/step - loss: 0.0275 - accuracy: 0.9923 - val_loss: 0.1374 - val_accuracy: 0.9644\n","Epoch 4/5\n","155/155 [==============================] - 24s 153ms/step - loss: 0.0154 - accuracy: 0.9962 - val_loss: 0.1468 - val_accuracy: 0.9636\n","Epoch 5/5\n","155/155 [==============================] - 23s 147ms/step - loss: 0.0085 - accuracy: 0.9978 - val_loss: 0.1425 - val_accuracy: 0.9660\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1269 - accuracy: 0.9683\n","Model Accuracy: 0.9683257937431335\n"]}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=60, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=120, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Hu7vNpLR1ie","executionInfo":{"status":"ok","timestamp":1708932073602,"user_tz":-360,"elapsed":147644,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"1852dce7-23a3-49ec-f3d5-9951e78e032a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 26s 144ms/step - loss: 0.2779 - accuracy: 0.8989 - val_loss: 0.1197 - val_accuracy: 0.9677\n","Epoch 2/5\n","155/155 [==============================] - 23s 149ms/step - loss: 0.0664 - accuracy: 0.9802 - val_loss: 0.0993 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 23s 147ms/step - loss: 0.0292 - accuracy: 0.9905 - val_loss: 0.1088 - val_accuracy: 0.9636\n","Epoch 4/5\n","155/155 [==============================] - 24s 153ms/step - loss: 0.0167 - accuracy: 0.9960 - val_loss: 0.1370 - val_accuracy: 0.9660\n","Epoch 5/5\n","155/155 [==============================] - 22s 141ms/step - loss: 0.0124 - accuracy: 0.9962 - val_loss: 0.1531 - val_accuracy: 0.9660\n","49/49 [==============================] - 2s 32ms/step - loss: 0.1262 - accuracy: 0.9664\n","Model Accuracy: 0.9663865566253662\n"]}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=80, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=160, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z0hcF5GFUQSS","executionInfo":{"status":"ok","timestamp":1708932770788,"user_tz":-360,"elapsed":208270,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"63774024-42ed-4b3a-c47b-32e451ae4ae0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 32s 185ms/step - loss: 0.2512 - accuracy: 0.9084 - val_loss: 0.1159 - val_accuracy: 0.9652\n","Epoch 2/5\n","155/155 [==============================] - 28s 181ms/step - loss: 0.0558 - accuracy: 0.9816 - val_loss: 0.1021 - val_accuracy: 0.9652\n","Epoch 3/5\n","155/155 [==============================] - 28s 180ms/step - loss: 0.0271 - accuracy: 0.9921 - val_loss: 0.1371 - val_accuracy: 0.9636\n","Epoch 4/5\n","155/155 [==============================] - 29s 190ms/step - loss: 0.0144 - accuracy: 0.9962 - val_loss: 0.1285 - val_accuracy: 0.9596\n","Epoch 5/5\n","155/155 [==============================] - 28s 179ms/step - loss: 0.0085 - accuracy: 0.9982 - val_loss: 0.1634 - val_accuracy: 0.9572\n","49/49 [==============================] - 2s 43ms/step - loss: 0.1326 - accuracy: 0.9612\n","Model Accuracy: 0.9612152576446533\n"]}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=70, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=70, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hj-K9dUcVQvx","executionInfo":{"status":"ok","timestamp":1708932918303,"user_tz":-360,"elapsed":103207,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"c55dd4e5-85ef-440f-e0c6-b631d32f2e27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 23s 132ms/step - loss: 0.2819 - accuracy: 0.8864 - val_loss: 0.1334 - val_accuracy: 0.9466\n","Epoch 2/5\n","155/155 [==============================] - 19s 121ms/step - loss: 0.0637 - accuracy: 0.9788 - val_loss: 0.0991 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 19s 124ms/step - loss: 0.0289 - accuracy: 0.9911 - val_loss: 0.1069 - val_accuracy: 0.9636\n","Epoch 4/5\n","155/155 [==============================] - 19s 123ms/step - loss: 0.0183 - accuracy: 0.9951 - val_loss: 0.1130 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 20s 130ms/step - loss: 0.0097 - accuracy: 0.9976 - val_loss: 0.1449 - val_accuracy: 0.9620\n","49/49 [==============================] - 2s 39ms/step - loss: 0.1323 - accuracy: 0.9651\n","Model Accuracy: 0.965093731880188\n"]}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=100, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gjPUQJo-WBEQ","executionInfo":{"status":"ok","timestamp":1708933120357,"user_tz":-360,"elapsed":108485,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"34068409-3e23-42e6-b9bc-fd020db22ffc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 24s 136ms/step - loss: 0.2974 - accuracy: 0.8935 - val_loss: 0.1305 - val_accuracy: 0.9507\n","Epoch 2/5\n","155/155 [==============================] - 19s 125ms/step - loss: 0.0681 - accuracy: 0.9788 - val_loss: 0.1133 - val_accuracy: 0.9644\n","Epoch 3/5\n","155/155 [==============================] - 20s 132ms/step - loss: 0.0273 - accuracy: 0.9913 - val_loss: 0.1383 - val_accuracy: 0.9636\n","Epoch 4/5\n","155/155 [==============================] - 19s 125ms/step - loss: 0.0153 - accuracy: 0.9954 - val_loss: 0.1173 - val_accuracy: 0.9555\n","Epoch 5/5\n","155/155 [==============================] - 21s 136ms/step - loss: 0.0087 - accuracy: 0.9976 - val_loss: 0.1453 - val_accuracy: 0.9652\n","49/49 [==============================] - 2s 33ms/step - loss: 0.1249 - accuracy: 0.9638\n","Model Accuracy: 0.9638009071350098\n"]}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=30, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=30, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sTROXxizW-F-","executionInfo":{"status":"ok","timestamp":1708933417926,"user_tz":-360,"elapsed":146429,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"f156425e-a326-4620-e62e-a1923749a4ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 21s 117ms/step - loss: 0.3391 - accuracy: 0.8593 - val_loss: 0.1749 - val_accuracy: 0.9426\n","Epoch 2/5\n","155/155 [==============================] - 16s 104ms/step - loss: 0.0937 - accuracy: 0.9675 - val_loss: 0.1418 - val_accuracy: 0.9547\n","Epoch 3/5\n","155/155 [==============================] - 16s 106ms/step - loss: 0.0373 - accuracy: 0.9889 - val_loss: 0.1230 - val_accuracy: 0.9669\n","Epoch 4/5\n","155/155 [==============================] - 18s 117ms/step - loss: 0.0203 - accuracy: 0.9951 - val_loss: 0.1202 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 16s 103ms/step - loss: 0.0120 - accuracy: 0.9974 - val_loss: 0.1219 - val_accuracy: 0.9628\n","49/49 [==============================] - 1s 28ms/step - loss: 0.1130 - accuracy: 0.9651\n","Model Accuracy: 0.965093731880188\n"]}]},{"cell_type":"code","source":["\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=300, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=300, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"huFQ7-e8aJpi","executionInfo":{"status":"ok","timestamp":1708934363871,"user_tz":-360,"elapsed":269303,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"761e640b-2765-4300-ffe4-ec9191bb777b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 50s 305ms/step - loss: 0.2225 - accuracy: 0.9096 - val_loss: 0.1149 - val_accuracy: 0.9620\n","Epoch 2/5\n","155/155 [==============================] - 47s 303ms/step - loss: 0.0518 - accuracy: 0.9826 - val_loss: 0.1079 - val_accuracy: 0.9669\n","Epoch 3/5\n","155/155 [==============================] - 49s 315ms/step - loss: 0.0219 - accuracy: 0.9937 - val_loss: 0.1249 - val_accuracy: 0.9620\n","Epoch 4/5\n","155/155 [==============================] - 46s 296ms/step - loss: 0.0100 - accuracy: 0.9970 - val_loss: 0.1256 - val_accuracy: 0.9620\n","Epoch 5/5\n","155/155 [==============================] - 48s 308ms/step - loss: 0.0080 - accuracy: 0.9978 - val_loss: 0.1671 - val_accuracy: 0.9515\n","49/49 [==============================] - 3s 69ms/step - loss: 0.1618 - accuracy: 0.9535\n","Model Accuracy: 0.953458309173584\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Values to iterate over\n","embedding_dims = [50, 100, 200, 300, 500]\n","\n","# Lists to store accuracy scores\n","accuracy_scores = []\n","\n","for embedding_dim in embedding_dims:\n","    # Build CNN model\n","    cnn_input = Input(shape=(max_len,))\n","    embedding_layer = Embedding(input_dim=max_words, output_dim=embedding_dim, input_length=max_len)(cnn_input)\n","    conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","    maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","    flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","    # Build LSTM model\n","    lstm_input = Input(shape=(max_len,))\n","    embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=embedding_dim, input_length=max_len)(lstm_input)\n","    lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","    # Merge CNN and LSTM models\n","    merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","    output = Dense(1, activation='sigmoid')(merged)\n","\n","    # Create and compile the model\n","    model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","    # Train the model\n","    model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","    # Evaluate the model\n","    accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","    accuracy_scores.append(accuracy)\n","\n","# Plot the comparison graph\n","plt.plot(embedding_dims, accuracy_scores, marker='o')\n","plt.title('Model Accuracy vs. Embedding Dimension')\n","plt.xlabel('Embedding Dimension')\n","plt.ylabel('Model Accuracy')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"IwhseYqrb17v","executionInfo":{"status":"ok","timestamp":1708935620821,"user_tz":-360,"elapsed":1095072,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"800ce19b-4e34-4701-895b-ec8805c8c1e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 26s 128ms/step - loss: 0.2849 - accuracy: 0.8902 - val_loss: 0.1297 - val_accuracy: 0.9450\n","Epoch 2/5\n","155/155 [==============================] - 19s 124ms/step - loss: 0.0672 - accuracy: 0.9792 - val_loss: 0.0975 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 18s 117ms/step - loss: 0.0504 - accuracy: 0.9877 - val_loss: 0.1131 - val_accuracy: 0.9693\n","Epoch 4/5\n","155/155 [==============================] - 19s 124ms/step - loss: 0.0345 - accuracy: 0.9889 - val_loss: 0.1140 - val_accuracy: 0.9636\n","Epoch 5/5\n","155/155 [==============================] - 18s 118ms/step - loss: 0.0168 - accuracy: 0.9954 - val_loss: 0.1501 - val_accuracy: 0.9636\n","49/49 [==============================] - 2s 33ms/step - loss: 0.1190 - accuracy: 0.9670\n","Epoch 1/5\n","155/155 [==============================] - 31s 175ms/step - loss: 0.2648 - accuracy: 0.8989 - val_loss: 0.1274 - val_accuracy: 0.9563\n","Epoch 2/5\n","155/155 [==============================] - 23s 145ms/step - loss: 0.0664 - accuracy: 0.9774 - val_loss: 0.1198 - val_accuracy: 0.9636\n","Epoch 3/5\n","155/155 [==============================] - 22s 139ms/step - loss: 0.0305 - accuracy: 0.9911 - val_loss: 0.1177 - val_accuracy: 0.9677\n","Epoch 4/5\n","155/155 [==============================] - 23s 146ms/step - loss: 0.0165 - accuracy: 0.9960 - val_loss: 0.1214 - val_accuracy: 0.9677\n","Epoch 5/5\n","155/155 [==============================] - 23s 149ms/step - loss: 0.0094 - accuracy: 0.9980 - val_loss: 0.1361 - val_accuracy: 0.9636\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1343 - accuracy: 0.9619\n","Epoch 1/5\n","155/155 [==============================] - 41s 245ms/step - loss: 0.2357 - accuracy: 0.9123 - val_loss: 0.1114 - val_accuracy: 0.9677\n","Epoch 2/5\n","155/155 [==============================] - 38s 245ms/step - loss: 0.0512 - accuracy: 0.9838 - val_loss: 0.1030 - val_accuracy: 0.9685\n","Epoch 3/5\n","155/155 [==============================] - 38s 243ms/step - loss: 0.0245 - accuracy: 0.9925 - val_loss: 0.1319 - val_accuracy: 0.9685\n","Epoch 4/5\n","155/155 [==============================] - 38s 243ms/step - loss: 0.0130 - accuracy: 0.9964 - val_loss: 0.1489 - val_accuracy: 0.9620\n","Epoch 5/5\n","155/155 [==============================] - 37s 241ms/step - loss: 0.0062 - accuracy: 0.9988 - val_loss: 0.1882 - val_accuracy: 0.9604\n","49/49 [==============================] - 3s 58ms/step - loss: 0.1884 - accuracy: 0.9586\n","Epoch 1/5\n","155/155 [==============================] - 51s 304ms/step - loss: 0.2084 - accuracy: 0.9222 - val_loss: 0.1191 - val_accuracy: 0.9636\n","Epoch 2/5\n","155/155 [==============================] - 48s 307ms/step - loss: 0.0491 - accuracy: 0.9836 - val_loss: 0.1114 - val_accuracy: 0.9685\n","Epoch 3/5\n","155/155 [==============================] - 49s 315ms/step - loss: 0.0228 - accuracy: 0.9937 - val_loss: 0.1230 - val_accuracy: 0.9677\n","Epoch 4/5\n","155/155 [==============================] - 46s 296ms/step - loss: 0.0123 - accuracy: 0.9968 - val_loss: 0.1299 - val_accuracy: 0.9628\n","Epoch 5/5\n","155/155 [==============================] - 47s 304ms/step - loss: 0.0069 - accuracy: 0.9984 - val_loss: 0.1429 - val_accuracy: 0.9604\n","49/49 [==============================] - 3s 68ms/step - loss: 0.1251 - accuracy: 0.9606\n","Epoch 1/5\n","155/155 [==============================] - 74s 458ms/step - loss: 0.2001 - accuracy: 0.9250 - val_loss: 0.1172 - val_accuracy: 0.9620\n","Epoch 2/5\n","155/155 [==============================] - 70s 454ms/step - loss: 0.0484 - accuracy: 0.9830 - val_loss: 0.1104 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 71s 461ms/step - loss: 0.0203 - accuracy: 0.9939 - val_loss: 0.1358 - val_accuracy: 0.9644\n","Epoch 4/5\n","155/155 [==============================] - 69s 445ms/step - loss: 0.0081 - accuracy: 0.9978 - val_loss: 0.1954 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 71s 457ms/step - loss: 0.0039 - accuracy: 0.9990 - val_loss: 0.1694 - val_accuracy: 0.9628\n","49/49 [==============================] - 6s 112ms/step - loss: 0.1524 - accuracy: 0.9638\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Values to iterate over\n","lstm_dims = [50, 70, 100, 120, 160]\n","cnn_dims = [30, 60, 80, 100, 140]\n","\n","# Lists to store accuracy scores\n","lstm_accuracy_scores = []\n","cnn_accuracy_scores = []\n","\n","# Function to create and train the model\n","def create_and_train_model(cnn_dim, lstm_dim):\n","    # Build CNN model\n","    cnn_input = Input(shape=(max_len,))\n","    embedding_layer = Embedding(input_dim=max_words, output_dim=cnn_dim, input_length=max_len)(cnn_input)\n","    conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","    maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","    flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","    # Build LSTM model\n","    lstm_input = Input(shape=(max_len,))\n","    embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=lstm_dim, input_length=max_len)(lstm_input)\n","    lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","    # Merge CNN and LSTM models\n","    merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","    output = Dense(1, activation='sigmoid')(merged)\n","\n","    # Create and compile the model\n","    model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","    # Train the model\n","    model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","    # Evaluate the model\n","    accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","    return accuracy\n","\n","# Iterate over LSTM dimensions\n","for lstm_dim in lstm_dims:\n","    accuracy = create_and_train_model(cnn_dims[0], lstm_dim)\n","    lstm_accuracy_scores.append(accuracy)\n","\n","# Iterate over CNN dimensions\n","for cnn_dim in cnn_dims:\n","    accuracy = create_and_train_model(cnn_dim, lstm_dims[0])\n","    cnn_accuracy_scores.append(accuracy)\n","\n","# Plot the comparison graphs\n","plt.figure(figsize=(12, 6))\n","\n","plt.subplot(1, 2, 1)\n","plt.plot(lstm_dims, lstm_accuracy_scores, marker='o')\n","plt.title('Model Accuracy vs. LSTM Dimension')\n","plt.xlabel('LSTM Dimension')\n","plt.ylabel('Model Accuracy')\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(cnn_dims, cnn_accuracy_scores, marker='o')\n","plt.title('Model Accuracy vs. CNN Dimension')\n","plt.xlabel('CNN Dimension')\n","plt.ylabel('Model Accuracy')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"C68HiHBnh11W","executionInfo":{"status":"ok","timestamp":1708937413471,"user_tz":-360,"elapsed":1272247,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"2a8eca19-5013-47fc-dba6-c2943dc55e50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 22s 125ms/step - loss: 0.2894 - accuracy: 0.8822 - val_loss: 0.1417 - val_accuracy: 0.9458\n","Epoch 2/5\n","155/155 [==============================] - 17s 111ms/step - loss: 0.0913 - accuracy: 0.9705 - val_loss: 0.1138 - val_accuracy: 0.9652\n","Epoch 3/5\n","155/155 [==============================] - 17s 110ms/step - loss: 0.0388 - accuracy: 0.9883 - val_loss: 0.1123 - val_accuracy: 0.9652\n","Epoch 4/5\n","155/155 [==============================] - 19s 125ms/step - loss: 0.0236 - accuracy: 0.9921 - val_loss: 0.1137 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 17s 111ms/step - loss: 0.0140 - accuracy: 0.9964 - val_loss: 0.1277 - val_accuracy: 0.9644\n","49/49 [==============================] - 1s 28ms/step - loss: 0.1092 - accuracy: 0.9644\n","Epoch 1/5\n","155/155 [==============================] - 22s 117ms/step - loss: 0.2865 - accuracy: 0.8824 - val_loss: 0.1419 - val_accuracy: 0.9466\n","Epoch 2/5\n","155/155 [==============================] - 17s 112ms/step - loss: 0.0677 - accuracy: 0.9810 - val_loss: 0.1073 - val_accuracy: 0.9652\n","Epoch 3/5\n","155/155 [==============================] - 19s 121ms/step - loss: 0.0360 - accuracy: 0.9877 - val_loss: 0.1150 - val_accuracy: 0.9652\n","Epoch 4/5\n","155/155 [==============================] - 17s 112ms/step - loss: 0.0217 - accuracy: 0.9935 - val_loss: 0.1260 - val_accuracy: 0.9628\n","Epoch 5/5\n","155/155 [==============================] - 20s 129ms/step - loss: 0.0142 - accuracy: 0.9960 - val_loss: 0.1431 - val_accuracy: 0.9612\n","49/49 [==============================] - 1s 29ms/step - loss: 0.1191 - accuracy: 0.9651\n","Epoch 1/5\n","155/155 [==============================] - 46s 131ms/step - loss: 0.2841 - accuracy: 0.8993 - val_loss: 0.1241 - val_accuracy: 0.9628\n","Epoch 2/5\n","155/155 [==============================] - 19s 121ms/step - loss: 0.1132 - accuracy: 0.9608 - val_loss: 0.1080 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 20s 128ms/step - loss: 0.0345 - accuracy: 0.9895 - val_loss: 0.1140 - val_accuracy: 0.9677\n","Epoch 4/5\n","155/155 [==============================] - 19s 120ms/step - loss: 0.0193 - accuracy: 0.9958 - val_loss: 0.1219 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 19s 126ms/step - loss: 0.0123 - accuracy: 0.9968 - val_loss: 0.1393 - val_accuracy: 0.9628\n","49/49 [==============================] - 2s 44ms/step - loss: 0.1217 - accuracy: 0.9664\n","Epoch 1/5\n","155/155 [==============================] - 26s 151ms/step - loss: 0.2773 - accuracy: 0.8995 - val_loss: 0.1345 - val_accuracy: 0.9588\n","Epoch 2/5\n","155/155 [==============================] - 21s 134ms/step - loss: 0.0663 - accuracy: 0.9784 - val_loss: 0.1154 - val_accuracy: 0.9604\n","Epoch 3/5\n","155/155 [==============================] - 22s 142ms/step - loss: 0.0323 - accuracy: 0.9905 - val_loss: 0.1420 - val_accuracy: 0.9660\n","Epoch 4/5\n","155/155 [==============================] - 22s 142ms/step - loss: 0.0194 - accuracy: 0.9947 - val_loss: 0.1202 - val_accuracy: 0.9596\n","Epoch 5/5\n","155/155 [==============================] - 21s 135ms/step - loss: 0.0108 - accuracy: 0.9968 - val_loss: 0.1380 - val_accuracy: 0.9588\n","49/49 [==============================] - 2s 42ms/step - loss: 0.1238 - accuracy: 0.9560\n","Epoch 1/5\n","155/155 [==============================] - 29s 171ms/step - loss: 0.2718 - accuracy: 0.8983 - val_loss: 0.1215 - val_accuracy: 0.9644\n","Epoch 2/5\n","155/155 [==============================] - 27s 173ms/step - loss: 0.0653 - accuracy: 0.9796 - val_loss: 0.1426 - val_accuracy: 0.9660\n","Epoch 3/5\n","155/155 [==============================] - 27s 173ms/step - loss: 0.0355 - accuracy: 0.9895 - val_loss: 0.1254 - val_accuracy: 0.9669\n","Epoch 4/5\n","155/155 [==============================] - 27s 172ms/step - loss: 0.0175 - accuracy: 0.9951 - val_loss: 0.1398 - val_accuracy: 0.9652\n","Epoch 5/5\n","155/155 [==============================] - 26s 165ms/step - loss: 0.0109 - accuracy: 0.9970 - val_loss: 0.1746 - val_accuracy: 0.9644\n","49/49 [==============================] - 2s 41ms/step - loss: 0.1495 - accuracy: 0.9619\n","Epoch 1/5\n","155/155 [==============================] - 21s 115ms/step - loss: 0.2953 - accuracy: 0.8904 - val_loss: 0.1412 - val_accuracy: 0.9491\n","Epoch 2/5\n","155/155 [==============================] - 17s 109ms/step - loss: 0.0755 - accuracy: 0.9751 - val_loss: 0.1018 - val_accuracy: 0.9652\n","Epoch 3/5\n","155/155 [==============================] - 18s 118ms/step - loss: 0.0381 - accuracy: 0.9893 - val_loss: 0.1145 - val_accuracy: 0.9660\n","Epoch 4/5\n","155/155 [==============================] - 17s 111ms/step - loss: 0.0216 - accuracy: 0.9943 - val_loss: 0.1270 - val_accuracy: 0.9628\n","Epoch 5/5\n","155/155 [==============================] - 17s 110ms/step - loss: 0.0146 - accuracy: 0.9958 - val_loss: 0.1446 - val_accuracy: 0.9612\n","49/49 [==============================] - 1s 29ms/step - loss: 0.1158 - accuracy: 0.9657\n","Epoch 1/5\n","155/155 [==============================] - 23s 127ms/step - loss: 0.3425 - accuracy: 0.8680 - val_loss: 0.1888 - val_accuracy: 0.9361\n","Epoch 2/5\n","155/155 [==============================] - 19s 126ms/step - loss: 0.1003 - accuracy: 0.9632 - val_loss: 0.1141 - val_accuracy: 0.9547\n","Epoch 3/5\n","155/155 [==============================] - 18s 116ms/step - loss: 0.0400 - accuracy: 0.9889 - val_loss: 0.1092 - val_accuracy: 0.9580\n","Epoch 4/5\n","155/155 [==============================] - 20s 126ms/step - loss: 0.0183 - accuracy: 0.9960 - val_loss: 0.1740 - val_accuracy: 0.9547\n","Epoch 5/5\n","155/155 [==============================] - 18s 117ms/step - loss: 0.0099 - accuracy: 0.9980 - val_loss: 0.1504 - val_accuracy: 0.9580\n","49/49 [==============================] - 2s 31ms/step - loss: 0.1300 - accuracy: 0.9625\n","Epoch 1/5\n","155/155 [==============================] - 23s 126ms/step - loss: 0.3389 - accuracy: 0.8644 - val_loss: 0.1916 - val_accuracy: 0.9329\n","Epoch 2/5\n","155/155 [==============================] - 21s 136ms/step - loss: 0.1036 - accuracy: 0.9630 - val_loss: 0.1304 - val_accuracy: 0.9483\n","Epoch 3/5\n","155/155 [==============================] - 19s 123ms/step - loss: 0.0421 - accuracy: 0.9867 - val_loss: 0.1192 - val_accuracy: 0.9612\n","Epoch 4/5\n","155/155 [==============================] - 20s 129ms/step - loss: 0.0194 - accuracy: 0.9949 - val_loss: 0.1455 - val_accuracy: 0.9604\n","Epoch 5/5\n","155/155 [==============================] - 19s 123ms/step - loss: 0.0105 - accuracy: 0.9980 - val_loss: 0.1187 - val_accuracy: 0.9620\n","49/49 [==============================] - 2s 33ms/step - loss: 0.1154 - accuracy: 0.9599\n","Epoch 1/5\n","155/155 [==============================] - 23s 130ms/step - loss: 0.2789 - accuracy: 0.8878 - val_loss: 0.1309 - val_accuracy: 0.9507\n","Epoch 2/5\n","155/155 [==============================] - 20s 132ms/step - loss: 0.0746 - accuracy: 0.9766 - val_loss: 0.1019 - val_accuracy: 0.9644\n","Epoch 3/5\n","155/155 [==============================] - 19s 126ms/step - loss: 0.0345 - accuracy: 0.9887 - val_loss: 0.1200 - val_accuracy: 0.9620\n","Epoch 4/5\n","155/155 [==============================] - 21s 134ms/step - loss: 0.0199 - accuracy: 0.9945 - val_loss: 0.1086 - val_accuracy: 0.9636\n","Epoch 5/5\n","155/155 [==============================] - 21s 134ms/step - loss: 0.0112 - accuracy: 0.9972 - val_loss: 0.1289 - val_accuracy: 0.9620\n","49/49 [==============================] - 2s 33ms/step - loss: 0.1198 - accuracy: 0.9677\n","Epoch 1/5\n","155/155 [==============================] - 27s 159ms/step - loss: 0.2667 - accuracy: 0.8995 - val_loss: 0.1322 - val_accuracy: 0.9507\n","Epoch 2/5\n","155/155 [==============================] - 24s 153ms/step - loss: 0.0840 - accuracy: 0.9725 - val_loss: 0.1075 - val_accuracy: 0.9588\n","Epoch 3/5\n","155/155 [==============================] - 22s 139ms/step - loss: 0.0369 - accuracy: 0.9881 - val_loss: 0.1132 - val_accuracy: 0.9669\n","Epoch 4/5\n","155/155 [==============================] - 24s 158ms/step - loss: 0.0197 - accuracy: 0.9954 - val_loss: 0.1186 - val_accuracy: 0.9612\n","Epoch 5/5\n","155/155 [==============================] - 25s 163ms/step - loss: 0.0118 - accuracy: 0.9970 - val_loss: 0.1270 - val_accuracy: 0.9636\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1140 - accuracy: 0.9638\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from tensorflow.keras.utils import plot_model\n","\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=140, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=70, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Plot the model architecture\n","plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":962},"id":"zpfz16qXnfkc","executionInfo":{"status":"ok","timestamp":1709382438877,"user_tz":-360,"elapsed":122117,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"26001b42-eb03-4bcf-98ae-7100ed77b6a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 27s 158ms/step - loss: 0.2728 - accuracy: 0.8963 - val_loss: 0.1503 - val_accuracy: 0.9442\n","Epoch 2/5\n","155/155 [==============================] - 23s 151ms/step - loss: 0.0760 - accuracy: 0.9739 - val_loss: 0.1116 - val_accuracy: 0.9636\n","Epoch 3/5\n","155/155 [==============================] - 23s 149ms/step - loss: 0.0336 - accuracy: 0.9905 - val_loss: 0.1047 - val_accuracy: 0.9669\n","Epoch 4/5\n","155/155 [==============================] - 21s 138ms/step - loss: 0.0201 - accuracy: 0.9939 - val_loss: 0.1172 - val_accuracy: 0.9669\n","Epoch 5/5\n","155/155 [==============================] - 24s 156ms/step - loss: 0.0127 - accuracy: 0.9966 - val_loss: 0.1393 - val_accuracy: 0.9636\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1357 - accuracy: 0.9644\n","Model Accuracy: 0.9644473195075989\n"]},{"output_type":"execute_result","data":{"image/png":"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\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from tensorflow.keras.utils import plot_model\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=140, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=70, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Plot the model architecture\n","plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":754},"id":"kTB8p3Wco08f","executionInfo":{"status":"ok","timestamp":1708937952240,"user_tz":-360,"elapsed":1771,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"ab9a96e7-7c24-448d-ca12-ccd585362528"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["pip install shap\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2lWAckhbpleK","executionInfo":{"status":"ok","timestamp":1708938162281,"user_tz":-360,"elapsed":9232,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"169af6ae-3f36-4fad-d1dc-3059a3a2db08"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting shap\n","  Downloading shap-0.44.1-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (535 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/535.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m92.2/535.7 kB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━\u001b[0m \u001b[32m491.5/535.7 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m535.7/535.7 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from shap) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from shap) (1.11.4)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from shap) (1.2.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from shap) (1.5.3)\n","Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/dist-packages (from shap) (4.66.2)\n","Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/dist-packages (from shap) (23.2)\n","Collecting slicer==0.0.7 (from shap)\n","  Downloading slicer-0.0.7-py3-none-any.whl (14 kB)\n","Requirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from shap) (0.58.1)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from shap) (2.2.1)\n","Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->shap) (0.41.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2023.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (3.3.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->shap) (1.16.0)\n","Installing collected packages: slicer, shap\n","Successfully installed shap-0.44.1 slicer-0.0.7\n"]}]},{"cell_type":"code","source":["import shap\n","import numpy as np\n","\n","# Assuming X_train_padded is your training data (padded sequences)\n","# and model is your Keras model\n","explainer = shap.Explainer(model, X_train_padded)\n","\n","# Choose a random sample for explanation\n","sample_index = np.random.randint(0, len(X_test_padded))\n","sample_text = X_test.iloc[sample_index]\n","\n","# Ensure the input is a 2D NumPy array\n","shap_values = explainer.shap_values(np.array([X_test_padded[sample_index]]))\n","\n","# Visualize the prediction explanation\n","shap.force_plot(explainer.expected_value[0], shap_values[0][0], X_test_padded[sample_index])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":477},"id":"4HcaQyxFpOBE","executionInfo":{"status":"error","timestamp":1708938385747,"user_tz":-360,"elapsed":502,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"d0e9d2e1-0ba6-403b-e937-6eeb5f76580d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Layer \"model_35\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor: shape=(8690, 100), dtype=float64, numpy=\narray([[   0.,    0.,    0., ...,   45.,    2.,   32.],\n       [   0.,    0.,    0., ...,  148.,   37.,   10.],\n       [1075.,   23.,  139., ...,   22.,  278.,   62.],\n       ...,\n       [ 100.,   36.,    2., ...,    2.,  566.,   19.],\n       [   7.,   25., 1401., ...,   13.,   20.,  248.],\n       [ 443.,  200., 1845., ...,    6.,   61.,  388.]])>]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-92d7e434f8ab>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# Ensure the input is a 2D NumPy array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mshap_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mX_test_padded\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Visualize the prediction explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/explainers/_permutation.py\u001b[0m in \u001b[0;36mshap_values\u001b[0;34m(self, X, npermutations, main_effects, error_bounds, batch_evals, silent)\u001b[0m\n\u001b[1;32m    211\u001b[0m         \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"shap_values() is deprecated; use __call__().\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDeprecationWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m         \u001b[0mexplanation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_evals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnpermutations\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmain_effects\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmain_effects\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mexplanation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/explainers/_permutation.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, max_evals, main_effects, error_bounds, batch_size, outputs, silent, *args)\u001b[0m\n\u001b[1;32m     77\u001b[0m         \"\"\" Explain the output of the model on the given arguments.\n\u001b[1;32m     78\u001b[0m         \"\"\"\n\u001b[0;32m---> 79\u001b[0;31m         return super().__call__(\n\u001b[0m\u001b[1;32m     80\u001b[0m             \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_evals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_evals\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmain_effects\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmain_effects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror_bounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_bounds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m             \u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msilent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msilent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/explainers/_explainer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, max_evals, main_effects, error_bounds, batch_size, outputs, silent, *args, **kwargs)\u001b[0m\n\u001b[1;32m    265\u001b[0m             \u001b[0mfeature_names\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mrow_args\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshow_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_rows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\" explainer\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msilent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 267\u001b[0;31m             row_result = self.explain_row(\n\u001b[0m\u001b[1;32m    268\u001b[0m                 \u001b[0;34m*\u001b[0m\u001b[0mrow_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_evals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_evals\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmain_effects\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmain_effects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror_bounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_bounds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    269\u001b[0m                 \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msilent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msilent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/explainers/_permutation.py\u001b[0m in \u001b[0;36mexplain_row\u001b[0;34m(self, max_evals, main_effects, error_bounds, batch_size, outputs, silent, *row_args)\u001b[0m\n\u001b[1;32m    135\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m                 \u001b[0;31m# evaluate the masked model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m                 \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmasks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzero_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mrow_values\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/utils/_masked_model.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, masks, zero_index, batch_size)\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmasks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmasker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"supports_delta_masking\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_delta_masking_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmasks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzero_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mzero_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;31m# we need to convert from delta masking to a full masking call because we were given a delta masking\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/utils/_masked_model.py\u001b[0m in \u001b[0;36m_delta_masking_call\u001b[0;34m(self, masks, zero_index, batch_size)\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0;31m# joined_masked_inputs = self._stack_inputs(all_masked_inputs)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msubset_masked_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0m_assert_output_input_match\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset_masked_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/models/_model.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minner_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0mis_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msafe_isinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"torch.Tensor\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mis_tensor\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_spec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 219\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    220\u001b[0m             \u001b[0;34mf'Layer \"{layer_name}\" expects {len(input_spec)} input(s),'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m             \u001b[0;34mf\" but it received {len(inputs)} input tensors. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Layer \"model_35\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor: shape=(8690, 100), dtype=float64, numpy=\narray([[   0.,    0.,    0., ...,   45.,    2.,   32.],\n       [   0.,    0.,    0., ...,  148.,   37.,   10.],\n       [1075.,   23.,  139., ...,   22.,  278.,   62.],\n       ...,\n       [ 100.,   36.,    2., ...,    2.,  566.,   19.],\n       [   7.,   25., 1401., ...,   13.,   20.,  248.],\n       [ 443.,  200., 1845., ...,    6.,   61.,  388.]])>]"]}]},{"cell_type":"code","source":["\n","# Explain the model's prediction\n","exp = explainer.explain_instance(sample_text, model.predict, num_features=10)\n","print('Explanation for the prediction:')\n","print(exp.as_list())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"zSP8yBMJWomD","executionInfo":{"status":"error","timestamp":1707675203118,"user_tz":-360,"elapsed":542,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"02099270-df8f-4237-d002-4d925c4efdac"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2440, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2425, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2413, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2381, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\", line 219, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Layer \"model_1\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=string>]\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-69511a0e2a53>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Explain the model's prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Explanation for the prediction:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, text_instance, classifier_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    411\u001b[0m                                         mask_string=self.mask_string))\n\u001b[1;32m    412\u001b[0m         \u001b[0mdomain_mapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextDomainMapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 413\u001b[0;31m         data, yss, distances = self.__data_labels_distances(\n\u001b[0m\u001b[1;32m    414\u001b[0m             \u001b[0mindexed_string\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             distance_metric=distance_metric)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36m__data_labels_distances\u001b[0;34m(self, indexed_string, classifier_fn, num_samples, distance_metric)\u001b[0m\n\u001b[1;32m    480\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minactive\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m             \u001b[0minverse_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_removing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minactive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minverse_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdistance_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcsr_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtf__predict_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2440, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2425, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2413, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2381, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\", line 219, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Layer \"model_1\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=string>]\n"]}]},{"cell_type":"code","source":["# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Wrapper function for model prediction\n","def predict_wrapper(texts):\n","    # Tokenize and pad sequences\n","    sequences = tokenizer.texts_to_sequences(texts)\n","    padded_sequences = pad_sequences(sequences, maxlen=max_len)\n","\n","    # Make predictions using the model\n","    predictions = model.predict([padded_sequences, padded_sequences])\n","\n","    # Return probabilities\n","    return predictions\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","\n","# Explain the model's prediction\n","exp = explainer.explain_instance(sample_text, predict_wrapper, num_features=10)\n","print('Explanation for the prediction:')\n","print(exp.as_list())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"FlC1G1lKOds-","executionInfo":{"status":"error","timestamp":1708931073839,"user_tz":-360,"elapsed":23327,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"4c51ecde-c703-4c42-b05c-6458828ce32e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["157/157 [==============================] - 17s 103ms/step\n"]},{"output_type":"error","ename":"IndexError","evalue":"index 1 is out of bounds for axis 1 with size 1","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-05a47c3984a0>\u001b[0m in \u001b[0;36m<cell line: 20>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# Explain the model's prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_wrapper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Explanation for the prediction:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, text_instance, classifier_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    427\u001b[0m             (ret_exp.intercept[label],\n\u001b[1;32m    428\u001b[0m              \u001b[0mret_exp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocal_exp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 429\u001b[0;31m              \u001b[0mret_exp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mret_exp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocal_pred\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance_with_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    430\u001b[0m                 \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m                 \u001b[0mmodel_regressor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel_regressor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_base.py\u001b[0m in \u001b[0;36mexplain_instance_with_data\u001b[0;34m(self, neighborhood_data, neighborhood_labels, distances, label, num_features, feature_selection, model_regressor)\u001b[0m\n\u001b[1;32m    180\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkernel_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistances\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mlabels_column\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mneighborhood_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m         used_features = self.feature_selection(neighborhood_data,\n\u001b[1;32m    184\u001b[0m                                                \u001b[0mlabels_column\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 1 is out of bounds for axis 1 with size 1"]}]},{"cell_type":"code","source":["# Wrapper function for model prediction\n","def predict_wrapper(texts):\n","    # Tokenize and pad sequences\n","    sequences = tokenizer.texts_to_sequences(texts)\n","    padded_sequences = pad_sequences(sequences, maxlen=max_len)\n","\n","    # Make predictions using the model\n","    predictions = model.predict([padded_sequences, padded_sequences])\n","\n","    # Return probabilities for class 1 (Depression)\n","    return predictions[0, 1]\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","\n","# Explain the model's prediction\n","exp = explainer.explain_instance(sample_text, predict_wrapper, num_features=10)\n","print('Explanation for the prediction:')\n","print(exp.as_list())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"QbJVXjo7O29R","executionInfo":{"status":"error","timestamp":1708931171709,"user_tz":-360,"elapsed":17362,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"46c5538a-4792-4ef9-b44a-df28520bd9b9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["157/157 [==============================] - 15s 98ms/step\n"]},{"output_type":"error","ename":"IndexError","evalue":"index 1 is out of bounds for axis 1 with size 1","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-112404aeee40>\u001b[0m in \u001b[0;36m<cell line: 17>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Explain the model's prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_wrapper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Explanation for the prediction:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, text_instance, classifier_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    411\u001b[0m                                         mask_string=self.mask_string))\n\u001b[1;32m    412\u001b[0m         \u001b[0mdomain_mapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextDomainMapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 413\u001b[0;31m         data, yss, distances = self.__data_labels_distances(\n\u001b[0m\u001b[1;32m    414\u001b[0m             \u001b[0mindexed_string\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             distance_metric=distance_metric)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36m__data_labels_distances\u001b[0;34m(self, indexed_string, classifier_fn, num_samples, distance_metric)\u001b[0m\n\u001b[1;32m    480\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minactive\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m             \u001b[0minverse_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_removing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minactive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minverse_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdistance_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcsr_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-112404aeee40>\u001b[0m in \u001b[0;36mpredict_wrapper\u001b[0;34m(texts)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;31m# Return probabilities for class 1 (Depression)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Choose a random sample for explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 1 is out of bounds for axis 1 with size 1"]}]},{"cell_type":"code","source":["# prompt:\n","\n","# Load the necessary libraries\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","import shap\n","import numpy as np\n","\n","# Load the dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer = Embedding(input_dim=max_words, output_dim=140, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer = Flatten()(maxpooling1d_layer)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=70, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Merge CNN and LSTM models\n","merged = concatenate([flatten_layer, lstm_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model = Model(inputs=[cnn_input, lstm_input], outputs=output)\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Plot the model architecture\n","plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\n","\n","# Train the model\n","model.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy = model.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model Accuracy: {accuracy}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Wrapper function for model prediction\n","def predict_wrapper(texts):\n","    # Tokenize and pad sequences\n","    sequences = tokenizer.texts_to_sequences(texts)\n","    padded_sequences = pad_sequences(sequences, maxlen=max_len)\n","\n","    # Make predictions using the model\n","    predictions = model.predict([padded_sequences, padded_sequences])\n","\n","    # Return probabilities for class 1 (Depression)\n","    return predictions[0, 1]\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","\n","# Explain the model's prediction\n","exp = explainer.explain_instance(sample_text, predict_wrapper, num_features=10)\n","print('Explanation for the prediction:')\n","print(exp.as_list())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":582},"id":"iWyTuia6bzEz","executionInfo":{"status":"error","timestamp":1708938622395,"user_tz":-360,"elapsed":160533,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"c66079d0-5b5f-44ec-8e0e-79cef11687dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 27s 154ms/step - loss: 0.3073 - accuracy: 0.8799 - val_loss: 0.1505 - val_accuracy: 0.9458\n","Epoch 2/5\n","155/155 [==============================] - 23s 150ms/step - loss: 0.0855 - accuracy: 0.9693 - val_loss: 0.1172 - val_accuracy: 0.9580\n","Epoch 3/5\n","155/155 [==============================] - 23s 150ms/step - loss: 0.0316 - accuracy: 0.9921 - val_loss: 0.1069 - val_accuracy: 0.9636\n","Epoch 4/5\n","155/155 [==============================] - 24s 154ms/step - loss: 0.0142 - accuracy: 0.9974 - val_loss: 0.1225 - val_accuracy: 0.9628\n","Epoch 5/5\n","155/155 [==============================] - 23s 146ms/step - loss: 0.0068 - accuracy: 0.9986 - val_loss: 0.1329 - val_accuracy: 0.9580\n","49/49 [==============================] - 3s 57ms/step - loss: 0.1319 - accuracy: 0.9573\n","Model Accuracy: 0.9573367834091187\n","157/157 [==============================] - 7s 38ms/step\n"]},{"output_type":"error","ename":"IndexError","evalue":"index 1 is out of bounds for axis 1 with size 1","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-8cb0a5922b71>\u001b[0m in \u001b[0;36m<cell line: 98>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;31m# Explain the model's prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_wrapper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Explanation for the prediction:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, text_instance, classifier_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    411\u001b[0m                                         mask_string=self.mask_string))\n\u001b[1;32m    412\u001b[0m         \u001b[0mdomain_mapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextDomainMapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 413\u001b[0;31m         data, yss, distances = self.__data_labels_distances(\n\u001b[0m\u001b[1;32m    414\u001b[0m             \u001b[0mindexed_string\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             distance_metric=distance_metric)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36m__data_labels_distances\u001b[0;34m(self, indexed_string, classifier_fn, num_samples, distance_metric)\u001b[0m\n\u001b[1;32m    480\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minactive\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m             \u001b[0minverse_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_removing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minactive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minverse_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdistance_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcsr_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-38-8cb0a5922b71>\u001b[0m in \u001b[0;36mpredict_wrapper\u001b[0;34m(texts)\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m     \u001b[0;31m# Return probabilities for class 1 (Depression)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 92\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;31m# Choose a random sample for explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 1 is out of bounds for axis 1 with size 1"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, GRU, Dense, Flatten, Input, concatenate\n","from keras.utils import to_categorical\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer_cnn = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer_cnn)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer_cnn = Flatten()(maxpooling1d_layer)\n","\n","# Build GRU model\n","gru_input = Input(shape=(max_len,))\n","embedding_layer_gru = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(gru_input)\n","gru_layer = GRU(100)(embedding_layer_gru)\n","\n","# Merge CNN and GRU models\n","merged = concatenate([flatten_layer_cnn, gru_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model_cnn_gru = Model(inputs=[cnn_input, gru_input], outputs=output)\n","model_cnn_gru.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model_cnn_gru.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy_cnn_gru = model_cnn_gru.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model (CNN + GRU) Accuracy: {accuracy_cnn_gru}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n","exp = explainer.explain_instance(sample_text, model_cnn_gru.predict, num_features=6)\n","\n","# Display Lime explanation\n","print('Explanation for the prediction:')\n","print(exp.as_list())\n","\n","# Define a function for prediction\n","def predict_fn(texts):\n","    # Preprocess the input texts\n","    sequences = tokenizer.texts_to_sequences(texts)\n","    padded_sequences = pad_sequences(sequences, maxlen=max_len)\n","\n","    # Make predictions using the model\n","    predictions = model_cnn_gru.predict([padded_sequences, padded_sequences])\n","\n","    return predictions\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n","\n","# Explain the model's prediction\n","exp = explainer.explain_instance(sample_text, predict_fn, num_features=6)\n","\n","# Display Lime explanation\n","print('Explanation for the prediction:')\n","print(exp.as_list())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":824},"id":"iaYVI8WyHXW6","executionInfo":{"status":"error","timestamp":1709399215349,"user_tz":-360,"elapsed":87779,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"9d4900da-92ba-4d44-c117-03363f21890c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 22s 125ms/step - loss: 0.3102 - accuracy: 0.8844 - val_loss: 0.1303 - val_accuracy: 0.9572\n","Epoch 2/5\n","155/155 [==============================] - 15s 95ms/step - loss: 0.0648 - accuracy: 0.9798 - val_loss: 0.1018 - val_accuracy: 0.9652\n","Epoch 3/5\n","155/155 [==============================] - 15s 95ms/step - loss: 0.0281 - accuracy: 0.9905 - val_loss: 0.1114 - val_accuracy: 0.9596\n","Epoch 4/5\n","155/155 [==============================] - 15s 95ms/step - loss: 0.0161 - accuracy: 0.9958 - val_loss: 0.1339 - val_accuracy: 0.9620\n","Epoch 5/5\n","155/155 [==============================] - 15s 97ms/step - loss: 0.0086 - accuracy: 0.9982 - val_loss: 0.1375 - val_accuracy: 0.9588\n","49/49 [==============================] - 1s 22ms/step - loss: 0.1223 - accuracy: 0.9651\n","Model (CNN + GRU) Accuracy: 0.965093731880188\n"]},{"output_type":"error","ename":"ValueError","evalue":"in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2440, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2425, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2413, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2381, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\", line 219, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Layer \"model_1\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=string>]\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-c9734bdc2ed7>\u001b[0m in \u001b[0;36m<cell line: 71>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0msample_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m \u001b[0msample_text_padded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpad_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtexts_to_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlen\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_cnn_gru\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;31m# Display Lime explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, text_instance, classifier_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    411\u001b[0m                                         mask_string=self.mask_string))\n\u001b[1;32m    412\u001b[0m         \u001b[0mdomain_mapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextDomainMapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 413\u001b[0;31m         data, yss, distances = self.__data_labels_distances(\n\u001b[0m\u001b[1;32m    414\u001b[0m             \u001b[0mindexed_string\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             distance_metric=distance_metric)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36m__data_labels_distances\u001b[0;34m(self, indexed_string, classifier_fn, num_samples, distance_metric)\u001b[0m\n\u001b[1;32m    480\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minactive\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m             \u001b[0minverse_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_removing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minactive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minverse_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdistance_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcsr_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtf__predict_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2440, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2425, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2413, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2381, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\", line 219, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Layer \"model_1\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=string>]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, GRU, Dense, Flatten, Input, concatenate\n","from lime.lime_text import LimeTextExplainer\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Build GRU model\n","gru_input = Input(shape=(max_len,))\n","embedding_layer_gru = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(gru_input)\n","gru_layer = GRU(100)(embedding_layer_gru)\n","\n","# Merge LSTM and GRU models\n","merged = concatenate([lstm_layer, gru_layer], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model_lstm_gru = Model(inputs=[lstm_input, gru_input], outputs=output)\n","model_lstm_gru.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model_lstm_gru.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","accuracy_lstm_gru = model_lstm_gru.evaluate([X_test_padded, X_test_padded], y_test)[1]\n","print(f'Model (LSTM + GRU) Accuracy: {accuracy_lstm_gru}')\n","\n","# Use Lime for explainability\n","explainer = LimeTextExplainer(class_names=['Not Depression', 'Depression'])\n","\n","# Choose a random sample for explanation\n","sample_text = X_test.sample().values[0]\n","sample_text_padded = pad_sequences(tokenizer.texts_to_sequences([sample_text]), maxlen=max_len)\n","exp = explainer.explain_instance(sample_text, model_lstm_gru.predict, num_features=6)\n","\n","# Display Lime explanation\n","print('Explanation for the prediction:')\n","print(exp.as_list())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":824},"id":"OHdmMc64IklM","executionInfo":{"status":"error","timestamp":1709399388687,"user_tz":-360,"elapsed":151874,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"c84d6350-210f-4cc7-b322-18f101e790d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 27s 145ms/step - loss: 0.3357 - accuracy: 0.8579 - val_loss: 0.1770 - val_accuracy: 0.9297\n","Epoch 2/5\n","155/155 [==============================] - 21s 137ms/step - loss: 0.0855 - accuracy: 0.9735 - val_loss: 0.1062 - val_accuracy: 0.9644\n","Epoch 3/5\n","155/155 [==============================] - 20s 126ms/step - loss: 0.0380 - accuracy: 0.9871 - val_loss: 0.1114 - val_accuracy: 0.9660\n","Epoch 4/5\n","155/155 [==============================] - 21s 133ms/step - loss: 0.0240 - accuracy: 0.9927 - val_loss: 0.1174 - val_accuracy: 0.9644\n","Epoch 5/5\n","155/155 [==============================] - 20s 130ms/step - loss: 0.0143 - accuracy: 0.9966 - val_loss: 0.1231 - val_accuracy: 0.9628\n","49/49 [==============================] - 2s 31ms/step - loss: 0.1143 - accuracy: 0.9619\n","Model (LSTM + GRU) Accuracy: 0.9618616700172424\n"]},{"output_type":"error","ename":"ValueError","evalue":"in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2440, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2425, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2413, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2381, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\", line 219, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Layer \"model_2\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=string>]\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-fb2d846a2527>\u001b[0m in \u001b[0;36m<cell line: 68>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0msample_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0msample_text_padded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpad_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtexts_to_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlen\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 68\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_lstm_gru\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     69\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m \u001b[0;31m# Display Lime explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, text_instance, classifier_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    411\u001b[0m                                         mask_string=self.mask_string))\n\u001b[1;32m    412\u001b[0m         \u001b[0mdomain_mapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextDomainMapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 413\u001b[0;31m         data, yss, distances = self.__data_labels_distances(\n\u001b[0m\u001b[1;32m    414\u001b[0m             \u001b[0mindexed_string\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             distance_metric=distance_metric)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lime/lime_text.py\u001b[0m in \u001b[0;36m__data_labels_distances\u001b[0;34m(self, indexed_string, classifier_fn, num_samples, distance_metric)\u001b[0m\n\u001b[1;32m    480\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minactive\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m             \u001b[0minverse_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexed_string\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_removing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minactive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minverse_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdistance_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcsr_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtf__predict_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2440, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2425, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2413, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2381, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/input_spec.py\", line 219, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Layer \"model_2\" expects 2 input(s), but it received 1 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=string>]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model\n","from keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Input, concatenate\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/depression_dataset_reddit_cleaned.csv\")\n","\n","# Assuming 'clean_text' is your input feature and 'is_depression' is your target variable\n","X = df['clean_text']\n","y = df['is_depression']\n","\n","# Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Tokenize and pad sequences\n","max_words = 5000\n","max_len = 100\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","X_train_seq = tokenizer.texts_to_sequences(X_train)\n","X_test_seq = tokenizer.texts_to_sequences(X_test)\n","\n","X_train_padded = pad_sequences(X_train_seq, maxlen=max_len)\n","X_test_padded = pad_sequences(X_test_seq, maxlen=max_len)\n","\n","# Build LSTM model\n","lstm_input = Input(shape=(max_len,))\n","embedding_layer_lstm = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(lstm_input)\n","lstm_layer = LSTM(100)(embedding_layer_lstm)\n","\n","# Build CNN model\n","cnn_input = Input(shape=(max_len,))\n","embedding_layer_cnn = Embedding(input_dim=max_words, output_dim=50, input_length=max_len)(cnn_input)\n","conv1d_layer = Conv1D(128, 5, activation='relu')(embedding_layer_cnn)\n","maxpooling1d_layer = MaxPooling1D(5)(conv1d_layer)\n","flatten_layer_cnn = Flatten()(maxpooling1d_layer)\n","\n","# Merge LSTM and CNN models\n","merged = concatenate([lstm_layer, flatten_layer_cnn], axis=-1)\n","output = Dense(1, activation='sigmoid')(merged)\n","\n","# Create and compile the model\n","model_lstm_cnn = Model(inputs=[lstm_input, cnn_input], outputs=output)\n","model_lstm_cnn.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model_lstm_cnn.fit([X_train_padded, X_train_padded], y_train, epochs=5, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","y_pred = model_lstm_cnn.predict([X_test_padded, X_test_padded])\n","y_pred_binary = (y_pred > 0.5).astype(int)\n","\n","accuracy = accuracy_score(y_test, y_pred_binary)\n","precision = precision_score(y_test, y_pred_binary)\n","recall = recall_score(y_test, y_pred_binary)\n","f1 = f1_score(y_test, y_pred_binary)\n","\n","print(f'Model (LSTM + CNN) Accuracy: {accuracy}')\n","print(f'Model (LSTM + CNN) Precision: {precision}')\n","print(f'Model (LSTM + CNN) Recall: {recall}')\n","print(f'Model (LSTM + CNN) F1 Score: {f1}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m5CTLWphJPmp","executionInfo":{"status":"ok","timestamp":1709399565922,"user_tz":-360,"elapsed":153994,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"c6f3236c-09f6-4b12-a8d2-0f9a689fec90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","155/155 [==============================] - 23s 106ms/step - loss: 0.2865 - accuracy: 0.8888 - val_loss: 0.1303 - val_accuracy: 0.9507\n","Epoch 2/5\n","155/155 [==============================] - 15s 99ms/step - loss: 0.0717 - accuracy: 0.9774 - val_loss: 0.1098 - val_accuracy: 0.9620\n","Epoch 3/5\n","155/155 [==============================] - 17s 111ms/step - loss: 0.0353 - accuracy: 0.9891 - val_loss: 0.1166 - val_accuracy: 0.9660\n","Epoch 4/5\n","155/155 [==============================] - 20s 126ms/step - loss: 0.0210 - accuracy: 0.9945 - val_loss: 0.1214 - val_accuracy: 0.9588\n","Epoch 5/5\n","155/155 [==============================] - 15s 98ms/step - loss: 0.0127 - accuracy: 0.9966 - val_loss: 0.1529 - val_accuracy: 0.9636\n","49/49 [==============================] - 2s 35ms/step\n","Model (LSTM + CNN) Accuracy: 0.9631544925662573\n","Model (LSTM + CNN) Precision: 0.9916550764951322\n","Model (LSTM + CNN) Recall: 0.9332460732984293\n","Model (LSTM + CNN) F1 Score: 0.961564396493594\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# List of model names and their corresponding accuracies\n","models = ['CNN-LSTM', 'CNN-GRU', 'LSTM-GRU', 'LSTM-CNN']\n","accuracies = [0.9683, 0.961, 0.961, 0.963]\n","\n","# Define colors in shades of blue\n","colors = ['#000066', '#003399', '#0066ff', '#33ccff']\n","\n","# Create a bar chart\n","plt.figure(figsize=(10, 6))\n","bars = plt.bar(models, accuracies, color=colors)\n","plt.ylim(0.95, 0.97)  # Set y-axis limits for better visualization\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy')\n","plt.title('Model Comparison - Accuracy')\n","\n","# Add text labels with accuracy values on each bar\n","for bar, accuracy in zip(bars, accuracies):\n","    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.001, f'{accuracy:.4f}', ha='center', va='bottom')\n","\n","plt.show()\n"],"metadata":{"id":"S9vYKtg7Lgwd","executionInfo":{"status":"ok","timestamp":1713879244955,"user_tz":-360,"elapsed":1044,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"d2827cbb-c416-4e04-cda0-a3e23ae8942f","colab":{"base_uri":"https://localhost:8080/","height":564}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Given values\n","TP = 1503  # Calculated based on accuracy and total\n","TN = 0      # Assuming 0 for this example\n","FP = 20     # Hypothetical value\n","FN = 24     # Hypothetical value\n","\n","# Create the confusion matrix\n","conf_matrix = [[TP, FP],\n","               [FN, TN]]\n","\n","# Plot\n","plt.figure(figsize=(6, 4))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Predicted Negative', 'Predicted Positive'], yticklabels=['Actual Negative', 'Actual Positive'])\n","plt.title('Confusion Matrix')\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"d4wSVEpEVYA6","executionInfo":{"status":"ok","timestamp":1713865625488,"user_tz":-360,"elapsed":1383,"user":{"displayName":"Airin Jahan Akhi","userId":"04942876415226258179"}},"outputId":"f8d8e358-fa5f-422e-963a-ecd1b5ceda76"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"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X9BikZ+fL5Z5enpCoVAgMTHxtS0NHh4e2L17t1rZmTNn/vsmieiNxs6HRGXIz88PlStXRu/evXHixAkkJCTg2LFjGDduHP7++28AwPjx4/HNN98gIiIC169fx+eff/6vcxC4urrC398fw4YNQ0REhHjOX375BQDg4uICmUyGvXv34sGDB8jKykLFihUxefJkTJw4ERs2bMDt27dx/vx5LFu2DBs2bAAAfPbZZ7h58yamTJmC+Ph4hIeHY/369aX9FhGRxJgYEJWhChUqICoqCtWrV0ffvn3h4eGB4cOH4/nz52ILwqRJk/Dxxx/D398f3t7eqFixIt57771/Pe/KlSvx/vvv4/PPP0edOnUwYsQIPH36FABQtWpVzJkzB9OmTYODgwPGjBkDAJg3bx5mzJiBoKAgeHh4oEuXLti3bx/c3NwAANWrV8eOHTsQERGBhg0bIjQ0FAsWLCjFd4eIygOZ8LoeTURERGRw2GJAREREIiYGREREJGJiQERERCImBkRERCRiYkBEREQiJgZEREQkYmJAREREIiYGREREJGJiQERERCImBkRERCRiYkBERESi/wOvSgJk84iyMgAAAABJRU5ErkJggg==\n"},"metadata":{}}]}]}